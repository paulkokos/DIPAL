version: 0.1.{build}

# Specify which branches to build
branches:
  only:
    - main
    - master
    - develop
    - feature/*
    - release/*

# Do not build on tags
skip_tags: true

# Build matrix - Multiple OS and compilers (NO Windows)
environment:
  matrix:
    # Ubuntu 20.04 - GCC builds
    - APPVEYOR_BUILD_WORKER_IMAGE: Ubuntu2004
      CC: gcc-11
      CXX: g++-11
      BUILD_TYPE: Debug
      BUILD_TESTS: ON
      BUILD_EXAMPLES: ON
    - APPVEYOR_BUILD_WORKER_IMAGE: Ubuntu2004
      CC: gcc-12
      CXX: g++-12
      BUILD_TYPE: Release
      BUILD_TESTS: ON
      BUILD_EXAMPLES: ON
    - APPVEYOR_BUILD_WORKER_IMAGE: Ubuntu2004
      CC: gcc-13
      CXX: g++-13
      BUILD_TYPE: Release
      BUILD_TESTS: OFF
      BUILD_EXAMPLES: ON
    # Ubuntu 20.04 - Clang builds
    - APPVEYOR_BUILD_WORKER_IMAGE: Ubuntu2004
      CC: clang-14
      CXX: clang++-14
      BUILD_TYPE: Debug
      BUILD_TESTS: ON
      BUILD_EXAMPLES: ON
    - APPVEYOR_BUILD_WORKER_IMAGE: Ubuntu2004
      CC: clang-15
      CXX: clang++-15
      BUILD_TYPE: Release
      BUILD_TESTS: OFF
      BUILD_EXAMPLES: ON
    - APPVEYOR_BUILD_WORKER_IMAGE: Ubuntu2004
      CC: clang-16
      CXX: clang++-16
      BUILD_TYPE: Release
      BUILD_TESTS: ON
      BUILD_EXAMPLES: ON
    # Ubuntu 22.04 - Latest compilers
    - APPVEYOR_BUILD_WORKER_IMAGE: Ubuntu2204
      CC: gcc-12
      CXX: g++-12
      BUILD_TYPE: Release
      BUILD_TESTS: ON
      BUILD_EXAMPLES: ON
    - APPVEYOR_BUILD_WORKER_IMAGE: Ubuntu2204
      CC: clang-17
      CXX: clang++-17
      BUILD_TYPE: Release
      BUILD_TESTS: ON
      BUILD_EXAMPLES: ON
    # macOS builds
    - APPVEYOR_BUILD_WORKER_IMAGE: macos-monterey
      CC: clang
      CXX: clang++
      BUILD_TYPE: Debug
      BUILD_TESTS: ON
      BUILD_EXAMPLES: ON
    - APPVEYOR_BUILD_WORKER_IMAGE: macos-monterey
      CC: clang
      CXX: clang++
      BUILD_TYPE: Release
      BUILD_TESTS: OFF
      BUILD_EXAMPLES: ON
    - APPVEYOR_BUILD_WORKER_IMAGE: macos-ventura
      CC: clang
      CXX: clang++
      BUILD_TYPE: Release
      BUILD_TESTS: ON
      BUILD_EXAMPLES: ON

# Install dependencies
install:
  # Common setup
  - git submodule update --init --recursive
  
  # Linux-specific setup
  - sh: |
      sudo apt-get update
      sudo apt-get install -y ninja-build cmake
      
      # Install GCC compilers
      if [[ "${CC}" == gcc-* ]]; then
        if [[ "${CC}" == "gcc-11" ]]; then
          sudo apt-get install -y gcc-11 g++-11
        elif [[ "${CC}" == "gcc-12" ]]; then
          sudo apt-get install -y gcc-12 g++-12
        elif [[ "${CC}" == "gcc-13" ]]; then
          # Add toolchain repository for GCC 13
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
          sudo apt-get update
          sudo apt-get install -y gcc-13 g++-13
        fi
      fi
      
      # Install Clang compilers
      if [[ "${CC}" == clang-* ]]; then
        # Add LLVM repository
        wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
        if [[ "${APPVEYOR_BUILD_WORKER_IMAGE}" == "Ubuntu2004" ]]; then
          sudo add-apt-repository "deb http://apt.llvm.org/focal/ llvm-toolchain-focal-14 main"
          sudo add-apt-repository "deb http://apt.llvm.org/focal/ llvm-toolchain-focal-15 main"
          sudo add-apt-repository "deb http://apt.llvm.org/focal/ llvm-toolchain-focal-16 main"
        elif [[ "${APPVEYOR_BUILD_WORKER_IMAGE}" == "Ubuntu2204" ]]; then
          sudo add-apt-repository "deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-17 main"
        fi
        sudo apt-get update
        sudo apt-get install -y ${CC}
        # Create symlink for clang++ if needed
        if [[ ! -f /usr/bin/${CXX} ]]; then
          sudo ln -sf /usr/bin/${CC} /usr/bin/${CXX}
        fi
      fi
      
      # Verify compiler installation
      ${CC} --version
      ${CXX} --version
  
  # macOS-specific setup
  - cmd: |
      if [[ "$APPVEYOR_BUILD_WORKER_IMAGE" == macos-* ]]; then
        # Update Homebrew and install dependencies
        brew update
        brew install ninja cmake
        
        # Install additional GCC on macOS if needed
        # brew install gcc@12 gcc@13
        
        # Verify compiler
        ${CC} --version
        ${CXX} --version
      fi

# Configure the build
before_build:
  - export CC=${CC}
  - export CXX=${CXX}
  - mkdir -p build
  - cd build
  - cmake -G "Ninja" -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DBUILD_TESTS=${BUILD_TESTS} -DBUILD_EXAMPLES=${BUILD_EXAMPLES} ..
  - cd ..

# Build the project
build_script:
  - cd build
  - cmake --build . --config ${BUILD_TYPE}
  - cd ..

# Run the tests
test_script:
  - if [[ "${BUILD_TESTS}" == "ON" ]]; then cd build && ctest --output-on-failure && cd ..; fi

# Package artifacts
after_build:
  - cd build
  - cmake --install . --prefix ../install --config ${BUILD_TYPE}
  - cd ..
  # Create OS-specific packages
  - sh: tar -czf DIPAL-${BUILD_TYPE}-${CC}-linux.tar.gz ./install/*
  - cmd: |
      if [[ "$APPVEYOR_BUILD_WORKER_IMAGE" == macos-* ]]; then
        tar -czf DIPAL-${BUILD_TYPE}-${CC}-macos.tar.gz ./install/*
      fi

# Define artifacts
artifacts:
  - path: '*.tar.gz'
    name: Cross-Platform-Artifacts
