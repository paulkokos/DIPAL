version: 0.1.{build}

# Specify which branches to build
branches:
  only:
    - main
    - master
    - develop
    - feature/*
    - release/*

# Do not build on tags
skip_tags: true

# Build matrix - multiple OS and configuration combinations
environment:
  matrix:
    # Windows + MSVC
    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2022
      CMAKE_GENERATOR: "Visual Studio 17 2022"
      PLATFORM: x64
      CONFIGURATION: Debug
      BUILD_TESTS: ON
      ENABLE_JPEG: ON

    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2022
      CMAKE_GENERATOR: "Visual Studio 17 2022"
      PLATFORM: x64
      CONFIGURATION: Release
      BUILD_TESTS: OFF
      ENABLE_JPEG: ON

    # Linux + GCC
    - APPVEYOR_BUILD_WORKER_IMAGE: Ubuntu
      CMAKE_GENERATOR: "Ninja"
      CONFIGURATION: Debug
      BUILD_TESTS: ON
      CC: gcc-12
      CXX: g++-12
      ENABLE_JPEG: ON

    - APPVEYOR_BUILD_WORKER_IMAGE: Ubuntu
      CMAKE_GENERATOR: "Ninja"
      CONFIGURATION: Release
      BUILD_TESTS: OFF
      CC: gcc-12
      CXX: g++-12
      ENABLE_JPEG: ON

    # Linux + Clang
    - APPVEYOR_BUILD_WORKER_IMAGE: Ubuntu
      CMAKE_GENERATOR: "Ninja"
      CONFIGURATION: Release
      BUILD_TESTS: OFF
      CC: clang-15
      CXX: clang++-15
      ENABLE_JPEG: ON

    # macOS + Clang
    - APPVEYOR_BUILD_WORKER_IMAGE: macOS
      CMAKE_GENERATOR: "Ninja"
      CONFIGURATION: Release
      BUILD_TESTS: OFF
      ENABLE_JPEG: ON

# Cache dependencies to speed up builds
cache:
  - build/vcpkg -> vcpkg.json
  - build/third_party -> .gitmodules

# Install dependencies
install:
  # Windows-specific
  - cmd: |-
      if "%PLATFORM%"=="x64" (
        set ARCHITECTURE=x64
      ) else (
        set ARCHITECTURE=Win32
      )
      if "%APPVEYOR_BUILD_WORKER_IMAGE%"=="Visual Studio 2022" (
        call "C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Auxiliary\Build\vcvarsall.bat" %ARCHITECTURE%
      )
      choco install ninja
      if not exist build mkdir build
  
  # Linux-specific
  - sh: |-
      if [[ "${APPVEYOR_BUILD_WORKER_IMAGE}" == "Ubuntu" ]]; then
        sudo apt-get update
        sudo apt-get install -y ninja-build build-essential libgtk-3-dev
        
        # Install compilers based on CC/CXX
        if [[ "${CC}" == "gcc-12" ]]; then
          sudo apt-get install -y gcc-12 g++-12
        elif [[ "${CC}" == "clang-15" ]]; then
          wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
          sudo add-apt-repository "deb http://apt.llvm.org/focal/ llvm-toolchain-focal-15 main"
          sudo apt-get update
          sudo apt-get install -y clang-15 libc++-15-dev libc++abi-15-dev
        fi
        
        # Install dependencies
        if [[ "${ENABLE_JPEG}" == "ON" ]]; then
          sudo apt-get install -y libjpeg-dev
        fi
        
        # Install GTest if needed
        if [[ "${BUILD_TESTS}" == "ON" ]]; then
          sudo apt-get install -y libgtest-dev
          cd /usr/src/gtest
          sudo cmake -E make_directory build
          cd build
          sudo cmake ..
          sudo cmake --build .
          sudo cp lib/libgtest*.a /usr/lib
          cd ${APPVEYOR_BUILD_FOLDER}
        fi
        
        mkdir -p build
      fi
  
  # macOS-specific
  - sh: |-
      if [[ "${APPVEYOR_BUILD_WORKER_IMAGE}" == "macOS" ]]; then
        brew update
        brew install ninja
        
        # Install dependencies
        if [[ "${ENABLE_JPEG}" == "ON" ]]; then
          brew install jpeg
        fi
        
        # Install GTest if needed
        if [[ "${BUILD_TESTS}" == "ON" ]]; then
          brew install googletest
        fi
        
        mkdir -p build
      fi

  # Clone and update submodules
  - git submodule update --init --recursive

# Configure the build
before_build:
  # Windows-specific
  - cmd: |-
      cd build
      cmake .. -G "%CMAKE_GENERATOR%" -A %PLATFORM% -DCMAKE_BUILD_TYPE=%CONFIGURATION% -DBUILD_TESTS=%BUILD_TESTS% -DDIPAL_ENABLE_JPEG=%ENABLE_JPEG%
      cd ..
  
  # Linux/macOS-specific
  - sh: |-
      cd build
      cmake .. -G "${CMAKE_GENERATOR}" -DCMAKE_BUILD_TYPE=${CONFIGURATION} -DBUILD_TESTS=${BUILD_TESTS} -DDIPAL_ENABLE_JPEG=${ENABLE_JPEG}
      cd ..

# Build the project
build_script:
  # Windows-specific
  - cmd: |-
      cd build
      cmake --build . --config %CONFIGURATION% -- /maxcpucount:4
      cd ..
  
  # Linux/macOS-specific
  - sh: |-
      cd build
      cmake --build . --config ${CONFIGURATION} -j 4
      cd ..

# Run the tests
test_script:
  # Windows-specific - run tests only in Debug with BUILD_TESTS=ON
  - cmd: |-
      if "%CONFIGURATION%"=="Debug" if "%BUILD_TESTS%"=="ON" (
        cd build
        ctest -C %CONFIGURATION% --output-on-failure
        cd ..
      )
  
  # Linux/macOS-specific - run tests only in Debug with BUILD_TESTS=ON
  - sh: |-
      if [[ "${CONFIGURATION}" == "Debug" && "${BUILD_TESTS}" == "ON" ]]; then
        cd build
        ctest -C ${CONFIGURATION} --output-on-failure
        cd ..
      fi

# Package artifacts
after_build:
  # Windows-specific
  - cmd: |-
      cd build
      cmake --install . --prefix ../install --config %CONFIGURATION%
      cd ..
      7z a DIPAL-%CONFIGURATION%-%PLATFORM%.zip ./install/*
  
  # Linux/macOS-specific
  - sh: |-
      cd build
      cmake --install . --prefix ../install --config ${CONFIGURATION}
      cd ..
      if [[ "${APPVEYOR_BUILD_WORKER_IMAGE}" == "Ubuntu" ]]; then
        if [[ "${CC}" == "gcc-12" ]]; then
          tar czf DIPAL-${CONFIGURATION}-Linux-GCC.tar.gz ./install/*
        else
          tar czf DIPAL-${CONFIGURATION}-Linux-Clang.tar.gz ./install/*
        fi
      elif [[ "${APPVEYOR_BUILD_WORKER_IMAGE}" == "macOS" ]]; then
        tar czf DIPAL-${CONFIGURATION}-macOS.tar.gz ./install/*
      fi

# Define artifacts
artifacts:
  - path: '*.zip'
    name: Windows
  - path: '*.tar.gz'
    name: Linux_macOS

# Deploy settings
deploy:
  provider: GitHub
  auth_token:
    secure: $(GITHUB_API_KEY) # Replace with your encrypted GitHub token
  artifact: Windows, Linux_macOS
  draft: true
  prerelease: true
  on:
    branch: main
    APPVEYOR_REPO_TAG: true # Deploy only on tags

# Notifications
notifications:
  - provider: Email
    to:
      - your-email@example.com # Replace with your email
    on_build_success: false
    on_build_failure: true
    on_build_status_changed: true
