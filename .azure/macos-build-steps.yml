# Template for macOS build steps
parameters:
- name: osVersion
  type: string

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.11'
    addToPath: true
  displayName: 'Use Python 3.11'
    
- script: |
    # Update Homebrew and install basic dependencies
    brew update
    brew install ninja cmake
    
    # Install additional compilers if specified
    if [[ "${CC}" == gcc-* ]]; then
      # Install GCC via Homebrew
      if [[ "${CC}" == "gcc-12" ]]; then
        brew install gcc@12
        export CC=gcc-12
        export CXX=g++-12
      elif [[ "${CC}" == "gcc-13" ]]; then
        brew install gcc@13
        export CC=gcc-13
        export CXX=g++-13
      fi
    elif [[ "${CC}" == "/opt/homebrew/opt/llvm/bin/clang" ]]; then
      # Install LLVM via Homebrew for newer Clang
      brew install llvm
      export CC=/opt/homebrew/opt/llvm/bin/clang
      export CXX=/opt/homebrew/opt/llvm/bin/clang++
    fi
    
    # Verify compiler installation
    ${CC} --version
    ${CXX} --version
    
    # Set environment variables for subsequent steps
    echo "CC=${CC}" >> $GITHUB_ENV
    echo "CXX=${CXX}" >> $GITHUB_ENV
    
  displayName: 'Install Build Dependencies (${{ parameters.osVersion }})'
  
- script: |
    # Initialize git submodules if any exist
    if [ -f .gitmodules ]; then
      git submodule update --init --recursive
    fi
  displayName: 'Initialize Git Submodules'
  
- script: |
    mkdir -p build
    cd build
    cmake -G "Ninja" \
      -DCMAKE_BUILD_TYPE=$(BUILD_TYPE) \
      -DBUILD_TESTS=$(BUILD_TESTS) \
      -DBUILD_EXAMPLES=$(BUILD_EXAMPLES) \
      -DENABLE_SANITIZERS=$(ENABLE_SANITIZERS) \
      -DCMAKE_INSTALL_PREFIX=$(Build.ArtifactStagingDirectory) \
      ..
  displayName: 'Configure CMake'
  env:
    CC: $(CC)
    CXX: $(CXX)
  
- script: |
    cd build
    cmake --build . --parallel $(sysctl -n hw.ncpu)
  displayName: 'Build Project'
  
- script: |
    cd build
    ctest --output-on-failure --parallel $(sysctl -n hw.ncpu)
  displayName: 'Run Tests'
  condition: eq(variables['BUILD_TESTS'], 'ON')
  
- script: |
    cd build
    cmake --install . --config $(BUILD_TYPE)
  displayName: 'Install Project'
  
- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'CTest'
    testResultsFiles: 'build/Testing/**/Test.xml'
    testRunTitle: 'CTest Results - ${{ parameters.osVersion }} - $(CC) $(BUILD_TYPE)'
  displayName: 'Publish Test Results'
  condition: eq(variables['BUILD_TESTS'], 'ON')
  
- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)'
    artifactName: 'DIPAL-${{ parameters.osVersion }}-$(CC)-$(BUILD_TYPE)'
  displayName: 'Publish Build Artifacts'
