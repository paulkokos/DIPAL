# Template for Linux build steps
parameters:
- name: osVersion
  type: string

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.11'
    addToPath: true
  displayName: 'Use Python 3.11'
    
- script: |
    sudo apt-get update
    sudo apt-get install -y ninja-build
    
    # Install GCC compilers
    if [[ "${CC}" == gcc-* ]]; then
      if [[ "${CC}" == "gcc-13" ]] || [[ "${CC}" == "gcc-14" ]]; then
        # Add toolchain repository for newer GCC versions
        sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
        sudo apt-get update
      fi
      sudo apt-get install -y ${CC} ${CXX}
    fi
    
    # Install Clang compilers
    if [[ "${CC}" == clang-* ]]; then
      # Add LLVM repository for newer Clang versions
      wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
      
      # Determine Ubuntu codename and add appropriate repositories
      if [[ "${{ parameters.osVersion }}" == "ubuntu-20.04" ]]; then
        sudo add-apt-repository "deb http://apt.llvm.org/focal/ llvm-toolchain-focal-14 main"
        sudo add-apt-repository "deb http://apt.llvm.org/focal/ llvm-toolchain-focal-15 main"
        sudo add-apt-repository "deb http://apt.llvm.org/focal/ llvm-toolchain-focal-16 main"
      elif [[ "${{ parameters.osVersion }}" == "ubuntu-22.04" ]]; then
        sudo add-apt-repository "deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-15 main"
        sudo add-apt-repository "deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-16 main"
        sudo add-apt-repository "deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-17 main"
      elif [[ "${{ parameters.osVersion }}" == "ubuntu-24.04" ]]; then
        sudo add-apt-repository "deb http://apt.llvm.org/noble/ llvm-toolchain-noble-17 main"
        sudo add-apt-repository "deb http://apt.llvm.org/noble/ llvm-toolchain-noble-18 main"
      fi
      
      sudo apt-get update
      sudo apt-get install -y ${CC}
      
      # Create symlink for clang++ if it doesn't exist
      if [[ ! -f /usr/bin/${CXX} ]]; then
        sudo ln -sf /usr/bin/${CC} /usr/bin/${CXX}
      fi
    fi
    
    # Verify compiler installation
    ${CC} --version
    ${CXX} --version
    
  displayName: 'Install Build Dependencies (${{ parameters.osVersion }})'
  
- script: |
    # Initialize git submodules if any exist
    if [ -f .gitmodules ]; then
      git submodule update --init --recursive
    fi
  displayName: 'Initialize Git Submodules'
  
- script: |
    mkdir -p build
    cd build
    cmake -G "Ninja" \
      -DCMAKE_BUILD_TYPE=$(BUILD_TYPE) \
      -DBUILD_TESTS=$(BUILD_TESTS) \
      -DBUILD_EXAMPLES=$(BUILD_EXAMPLES) \
      -DENABLE_SANITIZERS=$(ENABLE_SANITIZERS) \
      -DCMAKE_INSTALL_PREFIX=$(Build.ArtifactStagingDirectory) \
      ..
  displayName: 'Configure CMake'
  env:
    CC: $(CC)
    CXX: $(CXX)
  
- script: |
    cd build
    cmake --build . --parallel $(nproc)
  displayName: 'Build Project'
  
- script: |
    cd build
    ctest --output-on-failure --parallel $(nproc)
  displayName: 'Run Tests'
  condition: eq(variables['BUILD_TESTS'], 'ON')
  
- script: |
    cd build
    cmake --install . --config $(BUILD_TYPE)
  displayName: 'Install Project'
  
- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'CTest'
    testResultsFiles: 'build/Testing/**/Test.xml'
    testRunTitle: 'CTest Results - ${{ parameters.osVersion }} - $(CC) $(BUILD_TYPE)'
  displayName: 'Publish Test Results'
  condition: eq(variables['BUILD_TESTS'], 'ON')
  
- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)'
    artifactName: 'DIPAL-${{ parameters.osVersion }}-$(CC)-$(BUILD_TYPE)'
  displayName: 'Publish Build Artifacts'
