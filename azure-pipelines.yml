# Azure Pipelines configuration for DIPAL
# This pipeline builds the C++ project on multiple platforms

trigger:
  branches:
    include:
    - main
    - master
    - develop
    - feature/*
    - release/*
  paths:
    exclude:
    - README.md
    - LICENSE
    - docs/*
    - .github/*

# Define build variables
variables:
  CMAKE_VERSION: '3.28.0'

# Multi-platform builds (Linux and macOS)
jobs:
# Linux builds with multiple distributions and compilers
- job: Ubuntu_20_04
  displayName: 'Ubuntu 20.04 Builds'
  pool:
    vmImage: 'ubuntu-20.04'
  strategy:
    matrix:
      GCC11_Debug:
        CC: gcc-11
        CXX: g++-11
        BUILD_TYPE: Debug
        BUILD_TESTS: ON
        BUILD_EXAMPLES: ON
        ENABLE_SANITIZERS: ON
      GCC12_Release:
        CC: gcc-12
        CXX: g++-12
        BUILD_TYPE: Release
        BUILD_TESTS: ON
        BUILD_EXAMPLES: ON
        ENABLE_SANITIZERS: OFF
      Clang14_Debug:
        CC: clang-14
        CXX: clang++-14
        BUILD_TYPE: Debug
        BUILD_TESTS: ON
        BUILD_EXAMPLES: ON
        ENABLE_SANITIZERS: ON
      Clang15_Release:
        CC: clang-15
        CXX: clang++-15
        BUILD_TYPE: Release
        BUILD_TESTS: OFF
        BUILD_EXAMPLES: ON
        ENABLE_SANITIZERS: OFF

  steps:
  - template: .azure/linux-build-steps.yml
    parameters:
      osVersion: 'ubuntu-20.04'

- job: Ubuntu_22_04
  displayName: 'Ubuntu 22.04 Builds'
  pool:
    vmImage: 'ubuntu-22.04'
  strategy:
    matrix:
      GCC12_Debug:
        CC: gcc-12
        CXX: g++-12
        BUILD_TYPE: Debug
        BUILD_TESTS: ON
        BUILD_EXAMPLES: ON
        ENABLE_SANITIZERS: ON
      GCC13_Release:
        CC: gcc-13
        CXX: g++-13
        BUILD_TYPE: Release
        BUILD_TESTS: ON
        BUILD_EXAMPLES: ON
        ENABLE_SANITIZERS: OFF
      Clang15_Debug:
        CC: clang-15
        CXX: clang++-15
        BUILD_TYPE: Debug
        BUILD_TESTS: ON
        BUILD_EXAMPLES: ON
        ENABLE_SANITIZERS: ON
      Clang16_Release:
        CC: clang-16
        CXX: clang++-16
        BUILD_TYPE: Release
        BUILD_TESTS: OFF
        BUILD_EXAMPLES: ON
        ENABLE_SANITIZERS: OFF
      Clang17_Release:
        CC: clang-17
        CXX: clang++-17
        BUILD_TYPE: Release
        BUILD_TESTS: ON
        BUILD_EXAMPLES: ON
        ENABLE_SANITIZERS: OFF

  steps:
  - template: .azure/linux-build-steps.yml
    parameters:
      osVersion: 'ubuntu-22.04'

- job: Ubuntu_24_04
  displayName: 'Ubuntu 24.04 Builds'
  pool:
    vmImage: 'ubuntu-24.04'
  strategy:
    matrix:
      GCC13_Release:
        CC: gcc-13
        CXX: g++-13
        BUILD_TYPE: Release
        BUILD_TESTS: ON
        BUILD_EXAMPLES: ON
        ENABLE_SANITIZERS: OFF
      GCC14_Release:
        CC: gcc-14
        CXX: g++-14
        BUILD_TYPE: Release
        BUILD_TESTS: ON
        BUILD_EXAMPLES: ON
        ENABLE_SANITIZERS: OFF
      Clang17_Release:
        CC: clang-17
        CXX: clang++-17
        BUILD_TYPE: Release
        BUILD_TESTS: ON
        BUILD_EXAMPLES: ON
        ENABLE_SANITIZERS: OFF
      Clang18_Release:
        CC: clang-18
        CXX: clang++-18
        BUILD_TYPE: Release
        BUILD_TESTS: ON
        BUILD_EXAMPLES: ON
        ENABLE_SANITIZERS: OFF

  steps:
  - template: .azure/linux-build-steps.yml
    parameters:
      osVersion: 'ubuntu-24.04'

# macOS builds with Xcode and Homebrew compilers
- job: macOS_Monterey
  displayName: 'macOS 12 (Monterey) Builds'
  pool:
    vmImage: 'macOS-12'
  strategy:
    matrix:
      AppleClang_Debug:
        CC: clang
        CXX: clang++
        BUILD_TYPE: Debug
        BUILD_TESTS: ON
        BUILD_EXAMPLES: ON
        ENABLE_SANITIZERS: ON
      AppleClang_Release:
        CC: clang
        CXX: clang++
        BUILD_TYPE: Release
        BUILD_TESTS: OFF
        BUILD_EXAMPLES: ON
        ENABLE_SANITIZERS: OFF
      GCC12_Release:
        CC: gcc-12
        CXX: g++-12
        BUILD_TYPE: Release
        BUILD_TESTS: ON
        BUILD_EXAMPLES: ON
        ENABLE_SANITIZERS: OFF

  steps:
  - template: .azure/macos-build-steps.yml
    parameters:
      osVersion: 'macOS-12'

- job: macOS_Ventura
  displayName: 'macOS 13 (Ventura) Builds'
  pool:
    vmImage: 'macOS-13'
  strategy:
    matrix:
      AppleClang_Release:
        CC: clang
        CXX: clang++
        BUILD_TYPE: Release
        BUILD_TESTS: ON
        BUILD_EXAMPLES: ON
        ENABLE_SANITIZERS: OFF
      GCC13_Release:
        CC: gcc-13
        CXX: g++-13
        BUILD_TYPE: Release
        BUILD_TESTS: ON
        BUILD_EXAMPLES: ON
        ENABLE_SANITIZERS: OFF
      LLVM_Clang17:
        CC: /opt/homebrew/opt/llvm/bin/clang
        CXX: /opt/homebrew/opt/llvm/bin/clang++
        BUILD_TYPE: Release
        BUILD_TESTS: ON
        BUILD_EXAMPLES: ON
        ENABLE_SANITIZERS: OFF

  steps:
  - template: .azure/macos-build-steps.yml
    parameters:
      osVersion: 'macOS-13'

- job: macOS_Sonoma
  displayName: 'macOS 14 (Sonoma) Builds'
  pool:
    vmImage: 'macOS-14'
  strategy:
    matrix:
      AppleClang_Latest:
        CC: clang
        CXX: clang++
        BUILD_TYPE: Release
        BUILD_TESTS: ON
        BUILD_EXAMPLES: ON
        ENABLE_SANITIZERS: OFF

  steps:
  - template: .azure/macos-build-steps.yml
    parameters:
      osVersion: 'macOS-14'

# Documentation job (optional)
- job: Documentation
  displayName: 'Build Documentation'
  pool:
    vmImage: 'ubuntu-22.04'
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')
  
  steps:
  - script: |
      sudo apt-get update
      sudo apt-get install -y doxygen graphviz
    displayName: 'Install Documentation Tools'
    
  - script: |
      if [ -f docs/Doxyfile ]; then
        cd docs
        doxygen Doxyfile
      else
        echo "No Doxyfile found, skipping documentation build"
      fi
    displayName: 'Build Documentation'
    
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: 'docs/html'
      artifactName: 'Documentation'
    displayName: 'Publish Documentation'
    condition: succeeded()

# Cross-compilation jobs for different architectures
- job: Cross_Compilation
  displayName: 'Cross-compilation Builds'
  pool:
    vmImage: 'ubuntu-22.04'
  strategy:
    matrix:
      ARM64_GCC:
        TARGET_ARCH: aarch64-linux-gnu
        CC: aarch64-linux-gnu-gcc
        CXX: aarch64-linux-gnu-g++
        CMAKE_TOOLCHAIN: arm64-toolchain.cmake
        BUILD_TYPE: Release
        BUILD_TESTS: OFF
        BUILD_EXAMPLES: ON
      ARM_GCC:
        TARGET_ARCH: arm-linux-gnueabihf
        CC: arm-linux-gnueabihf-gcc
        CXX: arm-linux-gnueabihf-g++
        CMAKE_TOOLCHAIN: arm-toolchain.cmake
        BUILD_TYPE: Release
        BUILD_TESTS: OFF
        BUILD_EXAMPLES: ON
      RISCV64_GCC:
        TARGET_ARCH: riscv64-linux-gnu
        CC: riscv64-linux-gnu-gcc
        CXX: riscv64-linux-gnu-g++
        CMAKE_TOOLCHAIN: riscv64-toolchain.cmake
        BUILD_TYPE: Release
        BUILD_TESTS: OFF
        BUILD_EXAMPLES: ON

  steps:
  - script: |
      sudo apt-get update
      sudo apt-get install -y ninja-build
      
      # Install cross-compilation toolchains
      if [[ "$(TARGET_ARCH)" == "aarch64-linux-gnu" ]]; then
        sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
      elif [[ "$(TARGET_ARCH)" == "arm-linux-gnueabihf" ]]; then
        sudo apt-get install -y gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf
      elif [[ "$(TARGET_ARCH)" == "riscv64-linux-gnu" ]]; then
        sudo apt-get install -y gcc-riscv64-linux-gnu g++-riscv64-linux-gnu
      fi
      
      # Verify cross-compiler installation
      $(CC) --version
      $(CXX) --version
      
    displayName: 'Install Cross-compilation Tools'
    
  - script: |
      # Create CMake toolchain file
      mkdir -p cmake/toolchains
      
      if [[ "$(TARGET_ARCH)" == "aarch64-linux-gnu" ]]; then
        cat > cmake/toolchains/$(CMAKE_TOOLCHAIN) << 'EOF'
      set(CMAKE_SYSTEM_NAME Linux)
      set(CMAKE_SYSTEM_PROCESSOR aarch64)
      set(CMAKE_C_COMPILER aarch64-linux-gnu-gcc)
      set(CMAKE_CXX_COMPILER aarch64-linux-gnu-g++)
      set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
      set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
      set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
      EOF
      elif [[ "$(TARGET_ARCH)" == "arm-linux-gnueabihf" ]]; then
        cat > cmake/toolchains/$(CMAKE_TOOLCHAIN) << 'EOF'
      set(CMAKE_SYSTEM_NAME Linux)
      set(CMAKE_SYSTEM_PROCESSOR arm)
      set(CMAKE_C_COMPILER arm-linux-gnueabihf-gcc)
      set(CMAKE_CXX_COMPILER arm-linux-gnueabihf-g++)
      set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
      set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
      set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
      EOF
      elif [[ "$(TARGET_ARCH)" == "riscv64-linux-gnu" ]]; then
        cat > cmake/toolchains/$(CMAKE_TOOLCHAIN) << 'EOF'
      set(CMAKE_SYSTEM_NAME Linux)
      set(CMAKE_SYSTEM_PROCESSOR riscv64)
      set(CMAKE_C_COMPILER riscv64-linux-gnu-gcc)
      set(CMAKE_CXX_COMPILER riscv64-linux-gnu-g++)
      set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
      set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
      set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
      EOF
      fi
    displayName: 'Create CMake Toolchain Files'
    
  - script: |
      mkdir -p build
      cd build
      cmake -G "Ninja" \
        -DCMAKE_TOOLCHAIN_FILE=../cmake/toolchains/$(CMAKE_TOOLCHAIN) \
        -DCMAKE_BUILD_TYPE=$(BUILD_TYPE) \
        -DBUILD_TESTS=$(BUILD_TESTS) \
        -DBUILD_EXAMPLES=$(BUILD_EXAMPLES) \
        -DCMAKE_INSTALL_PREFIX=$(Build.ArtifactStagingDirectory) \
        ..
    displayName: 'Configure CMake for Cross-compilation'
    
  - script: |
      cd build
      cmake --build . --parallel $(nproc)
    displayName: 'Cross-compile Project'
    
  - script: |
      cd build
      cmake --install . --config $(BUILD_TYPE)
    displayName: 'Install Cross-compiled Project'
    
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: 'DIPAL-CrossCompiled-$(TARGET_ARCH)-$(BUILD_TYPE)'
    displayName: 'Publish Cross-compiled Artifacts'

# Container-based builds for additional distributions
- job: Container_Builds
  displayName: 'Container-based Distribution Builds'
  pool:
    vmImage: 'ubuntu-22.04'
  strategy:
    matrix:
      Alpine_GCC:
        CONTAINER_IMAGE: alpine:latest
        PACKAGE_MANAGER: apk
        CC: gcc
        CXX: g++
        BUILD_TYPE: Release
      Fedora_GCC:
        CONTAINER_IMAGE: fedora:latest
        PACKAGE_MANAGER: dnf
        CC: gcc
        CXX: g++
        BUILD_TYPE: Release
      Debian_GCC:
        CONTAINER_IMAGE: debian:bookworm
        PACKAGE_MANAGER: apt
        CC: gcc-12
        CXX: g++-12
        BUILD_TYPE: Release
      ArchLinux_GCC:
        CONTAINER_IMAGE: archlinux:latest
        PACKAGE_MANAGER: pacman
        CC: gcc
        CXX: g++
        BUILD_TYPE: Release

  steps:
  - script: |
      # Create build script for container
      cat > container_build.sh << 'EOF'
      #!/bin/bash
      set -e
      
      # Install dependencies based on package manager
      if [[ "$(PACKAGE_MANAGER)" == "apk" ]]; then
        apk update
        apk add --no-cache build-base cmake ninja git
      elif [[ "$(PACKAGE_MANAGER)" == "dnf" ]]; then
        dnf update -y
        dnf install -y gcc gcc-c++ cmake ninja-build git
      elif [[ "$(PACKAGE_MANAGER)" == "apt" ]]; then
        apt-get update
        apt-get install -y build-essential cmake ninja-build git gcc-12 g++-12
      elif [[ "$(PACKAGE_MANAGER)" == "pacman" ]]; then
        pacman -Syu --noconfirm
        pacman -S --noconfirm base-devel cmake ninja git
      fi
      
      # Build project
      mkdir -p build
      cd build
      cmake -G "Ninja" \
        -DCMAKE_BUILD_TYPE=$(BUILD_TYPE) \
        -DBUILD_TESTS=OFF \
        -DBUILD_EXAMPLES=ON \
        ..
      cmake --build . --parallel $(nproc)
      cmake --install . --prefix /tmp/install
      
      # Create archive
      cd /tmp
      tar -czf /output/DIPAL-$(CONTAINER_IMAGE | tr ':' '-')-$(BUILD_TYPE).tar.gz install/*
      EOF
      
      chmod +x container_build.sh
    displayName: 'Create Container Build Script'
    
  - script: |
      mkdir -p $(Build.ArtifactStagingDirectory)
      docker run --rm \
        -v $(pwd):/workspace \
        -v $(Build.ArtifactStagingDirectory):/output \
        -w /workspace \
        -e BUILD_TYPE=$(BUILD_TYPE) \
        -e PACKAGE_MANAGER=$(PACKAGE_MANAGER) \
        $(CONTAINER_IMAGE) \
        ./container_build.sh
    displayName: 'Build in Container ($(CONTAINER_IMAGE))'
    
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: 'DIPAL-Container-$(CONTAINER_IMAGE)-$(BUILD_TYPE)'
    displayName: 'Publish Container Build Artifacts'
